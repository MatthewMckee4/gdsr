from abc import ABC, abstractmethod

class Cell:
    @property
    def array_references(self) -> list[ArrayReference]: ...
    @property
    def polygons(self) -> list[Polygon]: ...
    @property
    def boxes(self) -> list[Box]: ...
    @property
    def nodes(self) -> list[Node]: ...
    @property
    def paths(self) -> list[Path]: ...
    @property
    def references(self) -> list[Reference]: ...
    @property
    def texts(self) -> list[Text]: ...
    def __init__(self) -> None: ...
    def add(self, element: Element) -> None: ...

class Element(ABC):
    @abstractmethod
    def __str__(self) -> str: ...

class ArrayReference(Element):
    def __init__(self) -> None: ...

class Reference(Element):
    def __init__(self) -> None: ...

class Box(Element):
    def __init__(self) -> None: ...

class Node(Element):
    def __init__(self) -> None: ...

class Path(Element):
    def __init__(self) -> None: ...

class Polygon(Element):
    def __init__(self) -> None: ...

class Text(Element):
    def __init__(self) -> None: ...
