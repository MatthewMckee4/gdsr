from typing import Union, Sequence, List
from .typing import PointLike, InputPointsLike, OutputPointsLike

class ArrayReference:
    def __init__(self) -> None: ...

class Reference:
    def __init__(self) -> None: ...

class Box:
    def __init__(self) -> None: ...

class Node:
    def __init__(self) -> None: ...

class Path:
    def __init__(self) -> None: ...

class Polygon:
    """Polygon element."""
    @property
    def points(self) -> OutputPointsLike: ...
    @points.setter
    def points(self, points: InputPointsLike) -> None: ...
    layer: int
    data_type: int
    def __init__(
        self, points: Sequence[PointLike], layer: int = 0, data_type: int = 0
    ) -> None: ...

class Text:
    def __init__(self) -> None: ...

Element = Union[ArrayReference, Reference, Box, Node, Path, Polygon, Text]

class Cell:
    name: str
    @property
    def array_references(self) -> List[ArrayReference]: ...
    @property
    def polygons(self) -> List[Polygon]: ...
    @property
    def boxes(self) -> List[Box]: ...
    @property
    def nodes(self) -> List[Node]: ...
    @property
    def paths(self) -> List[Path]: ...
    @property
    def references(self) -> List[Reference]: ...
    @property
    def texts(self) -> List[Text]: ...
    def __init__(self, name: str) -> None: ...
    def add(self, *elements: Element) -> None: ...
