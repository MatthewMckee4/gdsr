{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to GDSR","text":"<p>GDSR is a easy-to-use and fast GDSII manipulation Python package build in Rust.</p> <p>Some notable features of gdsr are:</p> <ul> <li>Strictly typed: Thorough python type hints</li> <li>Fast to Code: Due to many features</li> <li>Easy to Code: Designed to be very intuitive.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Use a virtual environment then install gdsr</p> <p>I recommend using uv</p> <pre><code>pip install uv\nuv venv\n\nsource .venv/bin/activate\n# or\n.venv/Scripts/activate\n\nuv pip install gdsr\n</code></pre>"},{"location":"#external-tools","title":"External Tools","text":"<p>You may be wondering how you can view your generated files.</p> <p>KLayout is an open source gdsii viewer and editor and its strongly recommended that you download it.</p>"},{"location":"#example","title":"Example","text":"<p>In this example we will create a simple 5x5 grid of polygons</p> <pre><code>from gdsr import Cell, Grid, Polygon, Reference\n\npolygon = Polygon([(0, 0), (1, 0), (1, 1), (0, 1), (0, 0)])\n\nreference = Reference(\n    polygon, Grid(columns=5, rows=5, spacing_x=(2, 0), spacing_y=(0, 2))\n)\n\ncell = Cell(\"example\")\n\ncell.add(reference)\n\ncell.to_gds(\"example.gds\")\n</code></pre> <p></p>"},{"location":"#interesting-features","title":"Interesting features","text":"<p>GDSR makes use of many of Python's dunder methods. Below is an example that shows how dunder methods make GDSR so easy to use.</p> <pre><code>from gdsr import Library, Cell\n\nlibrary = Library()\n\ncell = Cell(\"Main\")\n\nlibrary.add(cell)\n\nassert cell in library\n</code></pre> <p>Here the <code>in</code> keyword comes from the Library.__ contains __ </p>"},{"location":"development/","title":"Development","text":""},{"location":"development/contributing/git-standards/","title":"Git Standards","text":""},{"location":"development/contributing/git-standards/#branching","title":"Branching","text":"<p>Please adhere to semantic branch names. Below are a few links that explain what good commit message convention we would recommend sticking to.</p> <ul> <li>https://gist.github.com/seunggabi/87f8c722d35cd07deb3f649d45a31082</li> <li>https://damiandabrowski.medium.com/semantic-branch-names-and-commit-messages-3ac38a6fcbb6</li> </ul>"},{"location":"development/contributing/git-standards/#commit-messages","title":"Commit Messages","text":"<p>Please adhere to semantic commit messages. Below are a few links that explain what good commit message convention we would recommend sticking to.</p> <ul> <li>https://www.conventionalcommits.org/en/v1.0.0/</li> <li>https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716</li> </ul>"},{"location":"development/contributing/ide-configuration/","title":"IDE Configuration","text":"<p>Configuring your integrated development environments (IDE) properly will make it easier for you to work on gdsr and make it easier to conform to our code standards and style. Below are some configurations that we strongly recommend for your IDE.</p>"},{"location":"development/contributing/ide-configuration/#visual-studio-code","title":"Visual Studio Code","text":""},{"location":"python-api/","title":"Python API","text":""},{"location":"python-api/cell/","title":"Cell","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class Cell:\n    name: str\n    @property\n    def polygons(self) -&gt; list[Polygon]: ...\n    @property\n    def paths(self) -&gt; list[Path]: ...\n    @property\n    def references(self) -&gt; list[Reference[Instance]]: ...\n    @property\n    def texts(self) -&gt; list[Text]: ...\n    def __init__(self, name: str) -&gt; None:\n        \"\"\"Initialize the Cell with a name.\n\n        :param str name: Cell name\n        \"\"\"\n    @property\n    def bounding_box(self) -&gt; tuple[Point, Point]:\n        \"\"\"Return the bounding box of the cell.\"\"\"\n    def add(self, *elements: Element) -&gt; None:\n        \"\"\"Add elements to the cell.\"\"\"\n    def remove(self, *elements: Element) -&gt; None:\n        \"\"\"Remove elements from the cell.\"\"\"\n    def contains(self, element: Element) -&gt; bool:\n        \"\"\"Return True if the cell contains the element.\"\"\"\n    def is_empty(self) -&gt; bool:\n        \"\"\"Return True if the cell has no elements.\"\"\"\n    def move_to(self, point: PointLike) -&gt; Self:\n        \"\"\"Move everything in the cell to a point.\n\n        :param PointLike point: Point to move the cell to.\n        \"\"\"\n    def move_by(self, vector: PointLike) -&gt; Self:\n        \"\"\"Move everything in the cell by a vector.\n\n        :param PointLike vector: Vector to move the cell by.\n        \"\"\"\n    def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Rotate everything in the cell by an angle around a centre point.\n\n        :param float angle: Counter-clockwise rotation angle in degrees.\n        :param PointLike centre: Centre point of rotation, defaults to Point(0, 0).\n        \"\"\"\n    def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Scale everything in the cell by a factor around a centre point.\n\n        :param float factor: Scaling factor.\n        :param PointLike centre: Centre point of scaling, defaults to Point(0, 0).\n        \"\"\"\n    def flatten(\n        self, *layer_data_types: LayerDataType, depth: int | None = None\n    ) -&gt; Self:\n        \"\"\"Flatten the cell to a certain depth on the specified layer, data_type pairs.\n\n        Each reference on the depth is replaced by the elements it references.\n        If the depth is 0, nothing is flattened\n        If the depth is 1, only the first level of references is flattened\n        and so on.\n\n        When depth is None, the cell is flattened to the deepest level.\n\n        This method modifies the cell in place and returns itself.\n\n        :param LayerDataType layer_data_types: the layer, data_type pairs to flatten on\n        :param int depth: Depth of the flattening, defaults to None.\n        \"\"\"\n    def get_elements(\n        self, *layer_data_types: LayerDataType, depth: int | None = None\n    ) -&gt; list[Element]:\n        \"\"\"Return a list of elements in the cell.\n\n        This method does not modify the cell. It simply returns the elements\n        until the specified depth. If a reference is encountered before\n        it reaches the specified depth, the reference is flattened to the\n        level of depth relative to the cell.\n\n        When depth is None, the cell is flattened to the deepest level.\n\n        :param LayerDataType layer_data_types: the layer, data_type pairs to flatten on\n        :param int depth: Depth of the flattening, defaults to None.\n        \"\"\"\n    def copy(self) -&gt; Self:\n        \"\"\"Return a copy of the cell.\"\"\"\n    def to_gds(\n        self,\n        file_name: PathLike | None = None,\n        units: float = 1e-6,\n        precision: float = 1e-10,\n    ) -&gt; str:\n        \"\"\"Write the Cell to a GDS file.\n\n        :param PathLike file_name: Output GDS file name.\n        :param float units: GDS file units in meters, defaults to 1e-6.\n        :param float precision: GDS file precision, defaults to 1e-10.\n        :return: GDS file name\n        \"\"\"\n    def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n        \"\"\"Return True if the cell is on any of the layer, data_type pairs.\n\n        This method returns True if all elements in the cell are on any of the\n        layer, data_type pairs.\n        \"\"\"\n    def __contains__(self, element: Element) -&gt; bool:\n        \"\"\"Return True if the cell contains the element.\"\"\"\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the cell.\"\"\"\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the cell.\"\"\"\n    def __eq__(self, value: object) -&gt; bool:\n        \"\"\"Return True if the cell is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.polygons","title":"polygons  <code>property</code>","text":"<pre><code>polygons: list[Polygon]\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.paths","title":"paths  <code>property</code>","text":"<pre><code>paths: list[Path]\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.references","title":"references  <code>property</code>","text":"<pre><code>references: list[Reference[Instance]]\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.texts","title":"texts  <code>property</code>","text":"<pre><code>texts: list[Text]\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.bounding_box","title":"bounding_box  <code>property</code>","text":"<pre><code>bounding_box: tuple[Point, Point]\n</code></pre> <p>Return the bounding box of the cell.</p>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.__init__","title":"__init__","text":"<pre><code>__init__(name: str) -&gt; None\n</code></pre> <p>Initialize the Cell with a name.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Cell name</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __init__(self, name: str) -&gt; None:\n    \"\"\"Initialize the Cell with a name.\n\n    :param str name: Cell name\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.add","title":"add","text":"<pre><code>add(*elements: Element) -&gt; None\n</code></pre> <p>Add elements to the cell.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def add(self, *elements: Element) -&gt; None:\n    \"\"\"Add elements to the cell.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.remove","title":"remove","text":"<pre><code>remove(*elements: Element) -&gt; None\n</code></pre> <p>Remove elements from the cell.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def remove(self, *elements: Element) -&gt; None:\n    \"\"\"Remove elements from the cell.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.contains","title":"contains","text":"<pre><code>contains(element: Element) -&gt; bool\n</code></pre> <p>Return True if the cell contains the element.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def contains(self, element: Element) -&gt; bool:\n    \"\"\"Return True if the cell contains the element.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.is_empty","title":"is_empty","text":"<pre><code>is_empty() -&gt; bool\n</code></pre> <p>Return True if the cell has no elements.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def is_empty(self) -&gt; bool:\n    \"\"\"Return True if the cell has no elements.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.move_to","title":"move_to","text":"<pre><code>move_to(point: PointLike) -&gt; Self\n</code></pre> <p>Move everything in the cell to a point.</p> <p>Parameters:</p> <ul> <li> <code>point</code>               (<code>PointLike</code>)           \u2013            <p>Point to move the cell to.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_to(self, point: PointLike) -&gt; Self:\n    \"\"\"Move everything in the cell to a point.\n\n    :param PointLike point: Point to move the cell to.\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.move_by","title":"move_by","text":"<pre><code>move_by(vector: PointLike) -&gt; Self\n</code></pre> <p>Move everything in the cell by a vector.</p> <p>Parameters:</p> <ul> <li> <code>vector</code>               (<code>PointLike</code>)           \u2013            <p>Vector to move the cell by.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_by(self, vector: PointLike) -&gt; Self:\n    \"\"\"Move everything in the cell by a vector.\n\n    :param PointLike vector: Vector to move the cell by.\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.rotate","title":"rotate","text":"<pre><code>rotate(angle: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Rotate everything in the cell by an angle around a centre point.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Counter-clockwise rotation angle in degrees.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of rotation, defaults to Point(0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Rotate everything in the cell by an angle around a centre point.\n\n    :param float angle: Counter-clockwise rotation angle in degrees.\n    :param PointLike centre: Centre point of rotation, defaults to Point(0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.scale","title":"scale","text":"<pre><code>scale(factor: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Scale everything in the cell by a factor around a centre point.</p> <p>Parameters:</p> <ul> <li> <code>factor</code>               (<code>float</code>)           \u2013            <p>Scaling factor.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of scaling, defaults to Point(0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Scale everything in the cell by a factor around a centre point.\n\n    :param float factor: Scaling factor.\n    :param PointLike centre: Centre point of scaling, defaults to Point(0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.flatten","title":"flatten","text":"<pre><code>flatten(*layer_data_types: LayerDataType, depth: int | None = None) -&gt; Self\n</code></pre> <p>Flatten the cell to a certain depth on the specified layer, data_type pairs.</p> <p>Each reference on the depth is replaced by the elements it references. If the depth is 0, nothing is flattened If the depth is 1, only the first level of references is flattened and so on.</p> <p>When depth is None, the cell is flattened to the deepest level.</p> <p>This method modifies the cell in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>layer_data_types</code>               (<code>LayerDataType</code>, default:                   <code>()</code> )           \u2013            <p>the layer, data_type pairs to flatten on</p> </li> <li> <code>depth</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Depth of the flattening, defaults to None.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def flatten(\n    self, *layer_data_types: LayerDataType, depth: int | None = None\n) -&gt; Self:\n    \"\"\"Flatten the cell to a certain depth on the specified layer, data_type pairs.\n\n    Each reference on the depth is replaced by the elements it references.\n    If the depth is 0, nothing is flattened\n    If the depth is 1, only the first level of references is flattened\n    and so on.\n\n    When depth is None, the cell is flattened to the deepest level.\n\n    This method modifies the cell in place and returns itself.\n\n    :param LayerDataType layer_data_types: the layer, data_type pairs to flatten on\n    :param int depth: Depth of the flattening, defaults to None.\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.get_elements","title":"get_elements","text":"<pre><code>get_elements(*layer_data_types: LayerDataType, depth: int | None = None) -&gt; list[Element]\n</code></pre> <p>Return a list of elements in the cell.</p> <p>This method does not modify the cell. It simply returns the elements until the specified depth. If a reference is encountered before it reaches the specified depth, the reference is flattened to the level of depth relative to the cell.</p> <p>When depth is None, the cell is flattened to the deepest level.</p> <p>Parameters:</p> <ul> <li> <code>layer_data_types</code>               (<code>LayerDataType</code>, default:                   <code>()</code> )           \u2013            <p>the layer, data_type pairs to flatten on</p> </li> <li> <code>depth</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Depth of the flattening, defaults to None.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def get_elements(\n    self, *layer_data_types: LayerDataType, depth: int | None = None\n) -&gt; list[Element]:\n    \"\"\"Return a list of elements in the cell.\n\n    This method does not modify the cell. It simply returns the elements\n    until the specified depth. If a reference is encountered before\n    it reaches the specified depth, the reference is flattened to the\n    level of depth relative to the cell.\n\n    When depth is None, the cell is flattened to the deepest level.\n\n    :param LayerDataType layer_data_types: the layer, data_type pairs to flatten on\n    :param int depth: Depth of the flattening, defaults to None.\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.copy","title":"copy","text":"<pre><code>copy() -&gt; Self\n</code></pre> <p>Return a copy of the cell.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def copy(self) -&gt; Self:\n    \"\"\"Return a copy of the cell.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.to_gds","title":"to_gds","text":"<pre><code>to_gds(file_name: PathLike | None = None, units: float = 1e-06, precision: float = 1e-10) -&gt; str\n</code></pre> <p>Write the Cell to a GDS file.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>               (<code>PathLike</code>, default:                   <code>None</code> )           \u2013            <p>Output GDS file name.</p> </li> <li> <code>units</code>               (<code>float</code>, default:                   <code>1e-06</code> )           \u2013            <p>GDS file units in meters, defaults to 1e-6.</p> </li> <li> <code>precision</code>               (<code>float</code>, default:                   <code>1e-10</code> )           \u2013            <p>GDS file precision, defaults to 1e-10.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>GDS file name</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def to_gds(\n    self,\n    file_name: PathLike | None = None,\n    units: float = 1e-6,\n    precision: float = 1e-10,\n) -&gt; str:\n    \"\"\"Write the Cell to a GDS file.\n\n    :param PathLike file_name: Output GDS file name.\n    :param float units: GDS file units in meters, defaults to 1e-6.\n    :param float precision: GDS file precision, defaults to 1e-10.\n    :return: GDS file name\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.is_on","title":"is_on","text":"<pre><code>is_on(*layer_data_types: LayerDataType) -&gt; bool\n</code></pre> <p>Return True if the cell is on any of the layer, data_type pairs.</p> <p>This method returns True if all elements in the cell are on any of the layer, data_type pairs.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n    \"\"\"Return True if the cell is on any of the layer, data_type pairs.\n\n    This method returns True if all elements in the cell are on any of the\n    layer, data_type pairs.\n    \"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.__contains__","title":"__contains__","text":"<pre><code>__contains__(element: Element) -&gt; bool\n</code></pre> <p>Return True if the cell contains the element.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __contains__(self, element: Element) -&gt; bool:\n    \"\"\"Return True if the cell contains the element.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the cell.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the cell.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the cell.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the cell.\"\"\"\n</code></pre>"},{"location":"python-api/cell/#gdsr._gdsr.Cell.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Return True if the cell is equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"Return True if the cell is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/library/","title":"Library","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class Library:\n    name: str\n    @property\n    def cells(self) -&gt; Mapping[str, Cell]:\n        \"\"\"Return the cells in the library.\"\"\"\n    def __init__(self, name: str = \"library\") -&gt; None:\n        \"\"\"Initialize the Library with a name.\n\n        :param str name: Library name\n        \"\"\"\n    def add(self, *cells: Cell, replace_pre_existing: bool = False) -&gt; None:\n        \"\"\"Add cells to the library.\n\n        The cells that are added are not copied and are added by reference.\n        This means that modifying the cells after adding them to the library will\n        also modify the cells in the library.\n\n        If replace_pre_existing is True, this will also look at cells in references and\n        add those to the library as well.\n\n        :param Cell cells: Cells to add to the library.\n        :param bool replace_pre_existing: Replace pre-existing cells with the same name,\n        defaults to False. If this is False and a cell with the same name already exists\n        in the library, a ValueError will be raised.\n\n        ```python\n\n        import gdsr\n\n        lib = gdsr.Library()\n\n        cell = gdsr.Cell(\"cell\")\n\n        lib.add(cell)\n\n        cell_from_lib = lib.cells[\"cell\"]\n\n        cell_from_lib.add(gdsr.Polygon([(0, 0), (1, 0), (1, 1), (0, 1)]))\n\n        assert cell is cell_from_lib\n        ```\n        \"\"\"\n    def remove(self, *cells: Cell) -&gt; None:\n        \"\"\"Remove cells from the library.\"\"\"\n    def contains(self, cell: Cell) -&gt; bool:\n        \"\"\"Return True if the library contains the cell.\"\"\"\n    def copy(self, deep: bool = False) -&gt; Self:\n        \"\"\"Return a copy of the library.\n\n        :param bool deep: If True, a deep copy is returned, defaults to False.\n        \"\"\"\n    def to_gds(\n        self,\n        file_name: PathLike | None = None,\n        units: float = 1e-6,\n        precision: float = 1e-10,\n    ) -&gt; str:\n        \"\"\"Write the Library to a GDS file.\n\n        :param PathLike file_name: Output GDS file name.\n        :param float units: GDS file units in meters, defaults to 1e-6.\n        :param float precision: GDS file precision, defaults to 1e-10.\n        :return: GDS file path\n        \"\"\"\n    @staticmethod\n    def from_gds(file_name: PathLike) -&gt; Library:\n        \"\"\"Read a Library from a GDS file.\n\n        :param PathLike file_name: Input GDS file name.\n        :return: Library\n        \"\"\"\n    def __add__(self, other: Cell) -&gt; Self:\n        \"\"\"Add a cell to the library.\n\n        This simple calls the add method with the cell as an argument,\n        and replace_pre_existing as True.\n\n        :param Cell other: Cell to add to the library.\n\n        This can be used in the following way:\n        ```python\n        import gdsr\n\n        library = gdsr.Library()\n\n        cell = gdsr.Cell(\"cell\")\n\n        library = library + cell\n        # or\n        library += cell\n        # or\n        library + cell\n        ```\n        \"\"\"\n    def __contains__(self, cell: Cell) -&gt; bool:\n        \"\"\"Return True if the library contains the cell.\"\"\"\n    def __eq__(self, value: object) -&gt; bool:\n        \"\"\"Return True if the library is equal to another object.\"\"\"\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the library.\"\"\"\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the library.\"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.cells","title":"cells  <code>property</code>","text":"<pre><code>cells: Mapping[str, Cell]\n</code></pre> <p>Return the cells in the library.</p>"},{"location":"python-api/library/#gdsr._gdsr.Library.__init__","title":"__init__","text":"<pre><code>__init__(name: str = 'library') -&gt; None\n</code></pre> <p>Initialize the Library with a name.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>'library'</code> )           \u2013            <p>Library name</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __init__(self, name: str = \"library\") -&gt; None:\n    \"\"\"Initialize the Library with a name.\n\n    :param str name: Library name\n    \"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.add","title":"add","text":"<pre><code>add(*cells: Cell, replace_pre_existing: bool = False) -&gt; None\n</code></pre> <p>Add cells to the library.</p> <p>The cells that are added are not copied and are added by reference. This means that modifying the cells after adding them to the library will also modify the cells in the library.</p> <p>If replace_pre_existing is True, this will also look at cells in references and add those to the library as well.</p> <p>Parameters:</p> <ul> <li> <code>cells</code>               (<code>Cell</code>, default:                   <code>()</code> )           \u2013            <p>Cells to add to the library.</p> </li> <li> <code>replace_pre_existing</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Replace pre-existing cells with the same name, defaults to False. If this is False and a cell with the same name already exists in the library, a ValueError will be raised.  <code>python  import gdsr  lib = gdsr.Library()  cell = gdsr.Cell(\"cell\")  lib.add(cell)  cell_from_lib = lib.cells[\"cell\"]  cell_from_lib.add(gdsr.Polygon([(0, 0), (1, 0), (1, 1), (0, 1)]))  assert cell is cell_from_lib</code></p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def add(self, *cells: Cell, replace_pre_existing: bool = False) -&gt; None:\n    \"\"\"Add cells to the library.\n\n    The cells that are added are not copied and are added by reference.\n    This means that modifying the cells after adding them to the library will\n    also modify the cells in the library.\n\n    If replace_pre_existing is True, this will also look at cells in references and\n    add those to the library as well.\n\n    :param Cell cells: Cells to add to the library.\n    :param bool replace_pre_existing: Replace pre-existing cells with the same name,\n    defaults to False. If this is False and a cell with the same name already exists\n    in the library, a ValueError will be raised.\n\n    ```python\n\n    import gdsr\n\n    lib = gdsr.Library()\n\n    cell = gdsr.Cell(\"cell\")\n\n    lib.add(cell)\n\n    cell_from_lib = lib.cells[\"cell\"]\n\n    cell_from_lib.add(gdsr.Polygon([(0, 0), (1, 0), (1, 1), (0, 1)]))\n\n    assert cell is cell_from_lib\n    ```\n    \"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.remove","title":"remove","text":"<pre><code>remove(*cells: Cell) -&gt; None\n</code></pre> <p>Remove cells from the library.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def remove(self, *cells: Cell) -&gt; None:\n    \"\"\"Remove cells from the library.\"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.contains","title":"contains","text":"<pre><code>contains(cell: Cell) -&gt; bool\n</code></pre> <p>Return True if the library contains the cell.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def contains(self, cell: Cell) -&gt; bool:\n    \"\"\"Return True if the library contains the cell.\"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.copy","title":"copy","text":"<pre><code>copy(deep: bool = False) -&gt; Self\n</code></pre> <p>Return a copy of the library.</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, a deep copy is returned, defaults to False.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def copy(self, deep: bool = False) -&gt; Self:\n    \"\"\"Return a copy of the library.\n\n    :param bool deep: If True, a deep copy is returned, defaults to False.\n    \"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.to_gds","title":"to_gds","text":"<pre><code>to_gds(file_name: PathLike | None = None, units: float = 1e-06, precision: float = 1e-10) -&gt; str\n</code></pre> <p>Write the Library to a GDS file.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>               (<code>PathLike</code>, default:                   <code>None</code> )           \u2013            <p>Output GDS file name.</p> </li> <li> <code>units</code>               (<code>float</code>, default:                   <code>1e-06</code> )           \u2013            <p>GDS file units in meters, defaults to 1e-6.</p> </li> <li> <code>precision</code>               (<code>float</code>, default:                   <code>1e-10</code> )           \u2013            <p>GDS file precision, defaults to 1e-10.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>GDS file path</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def to_gds(\n    self,\n    file_name: PathLike | None = None,\n    units: float = 1e-6,\n    precision: float = 1e-10,\n) -&gt; str:\n    \"\"\"Write the Library to a GDS file.\n\n    :param PathLike file_name: Output GDS file name.\n    :param float units: GDS file units in meters, defaults to 1e-6.\n    :param float precision: GDS file precision, defaults to 1e-10.\n    :return: GDS file path\n    \"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.from_gds","title":"from_gds  <code>staticmethod</code>","text":"<pre><code>from_gds(file_name: PathLike) -&gt; Library\n</code></pre> <p>Read a Library from a GDS file.</p> <p>Parameters:</p> <ul> <li> <code>file_name</code>               (<code>PathLike</code>)           \u2013            <p>Input GDS file name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Library</code>           \u2013            <p>Library</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>@staticmethod\ndef from_gds(file_name: PathLike) -&gt; Library:\n    \"\"\"Read a Library from a GDS file.\n\n    :param PathLike file_name: Input GDS file name.\n    :return: Library\n    \"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.__add__","title":"__add__","text":"<pre><code>__add__(other: Cell) -&gt; Self\n</code></pre> <p>Add a cell to the library.</p> <p>This simple calls the add method with the cell as an argument, and replace_pre_existing as True.</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Cell</code>)           \u2013            <p>Cell to add to the library.  This can be used in the following way: <code>python import gdsr  library = gdsr.Library()  cell = gdsr.Cell(\"cell\")  library = library + cell # or library += cell # or library + cell</code></p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __add__(self, other: Cell) -&gt; Self:\n    \"\"\"Add a cell to the library.\n\n    This simple calls the add method with the cell as an argument,\n    and replace_pre_existing as True.\n\n    :param Cell other: Cell to add to the library.\n\n    This can be used in the following way:\n    ```python\n    import gdsr\n\n    library = gdsr.Library()\n\n    cell = gdsr.Cell(\"cell\")\n\n    library = library + cell\n    # or\n    library += cell\n    # or\n    library + cell\n    ```\n    \"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.__contains__","title":"__contains__","text":"<pre><code>__contains__(cell: Cell) -&gt; bool\n</code></pre> <p>Return True if the library contains the cell.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __contains__(self, cell: Cell) -&gt; bool:\n    \"\"\"Return True if the library contains the cell.\"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Return True if the library is equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"Return True if the library is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the library.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the library.\"\"\"\n</code></pre>"},{"location":"python-api/library/#gdsr._gdsr.Library.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the library.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the library.\"\"\"\n</code></pre>"},{"location":"python-api/point/","title":"Point","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class Point:\n    @property\n    def x(self) -&gt; float:\n        \"\"\"Return the x coordinate.\"\"\"\n    @property\n    def y(self) -&gt; float:\n        \"\"\"Return the y coordinate.\"\"\"\n    def __init__(self, x: float, y: float) -&gt; None:\n        \"\"\"Initialize the Point with x and y coordinates.\n\n        :param float x: x coordinate\n        :param float y: y coordinate\n        \"\"\"\n    def distance_to(self, other: PointLike) -&gt; float:\n        \"\"\"Return the distance to another point.\"\"\"\n    def cross(self, other: PointLike) -&gt; float:\n        \"\"\"Return the cross product with another point.\"\"\"\n    def copy(self) -&gt; Self:\n        \"\"\"Return a copy of the point.\"\"\"\n    def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Rotates the point by an angle around a centre point.\n\n        :param float angle: Counter-clockwise rotation angle in degrees.\n        :param PointLike centre: Centre point of rotation, defaults to Point(0, 0).\n        \"\"\"\n    def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Scales the point by a factor around a centre point.\n\n        :param float factor: Scaling factor.\n        :param PointLike centre: Centre point of scaling, defaults to Point(0, 0).\n        \"\"\"\n    def round(self, digits: int = 0) -&gt; Self:\n        \"\"\"Return the point with rounded coordinates.\n\n        :param int digits: Number of digits to round to, defaults to None.\n        \"\"\"\n    def angle_to(self, other: PointLike) -&gt; float | None:\n        \"\"\"Return the angle to another point in degrees.\n\n        The angle is measured counter-clockwise from the x-axis\n        and is in the range of 0 to 360 degrees.\n\n        Return None if the points are the same.\n\n        :param PointLike other: The other point.\n        \"\"\"\n    def is_close(\n        self, other: PointLike, rel_tol: float = 1e-7, abs_tol: float = 1e-10\n    ) -&gt; bool:\n        \"\"\"Return True if the point is close to another point.\n\n        :param PointLike other: The other point.\n        :param float rel_tol: Relative tolerance, defaults to 1e-9.\n        :param float abs_tol: Absolute tolerance, defaults to 0.0.\n        \"\"\"\n    def epsilon_is_close(self, other: PointLike) -&gt; bool:\n        \"\"\"Return True if the point is close to another point using epsilon.\n\n        This is used in all equality checks in gdsr.\n\n        :param PointLike other: The other point.\n        \"\"\"\n    def reflect(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Reflect the point across a line defined by an angle around a centre point.\n\n        :param float angle: Angle of the line in degrees.\n        :param PointLike centre: Centre point of reflection, defaults to Point(0, 0).\n        \"\"\"\n    def __getitem__(self, index: Literal[0, 1]) -&gt; float:\n        \"\"\"Return the x or y coordinate of the point.\"\"\"\n    def __bool__(self) -&gt; bool:\n        \"\"\"Return True if the point is not the origin.\"\"\"\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the point.\"\"\"\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the point.\"\"\"\n    def __add__(self, other: PointLike) -&gt; Self:\n        \"\"\"Return the sum of the point and another point.\"\"\"\n    def __radd__(self, other: PointLike) -&gt; Self:\n        \"\"\"Return the sum of the point and another point.\"\"\"\n    def __sub__(self, other: PointLike) -&gt; Self:\n        \"\"\"Return the difference of the point and another point.\"\"\"\n    def __rsub__(self, other: PointLike) -&gt; Self:\n        \"\"\"Return the difference of the point and another point.\"\"\"\n    def __mul__(self, value: float) -&gt; Self:\n        \"\"\"Return the product of the point and a scalar.\"\"\"\n    def __rmul__(self, value: float) -&gt; Self:\n        \"\"\"Return the product of the point and a scalar.\"\"\"\n    def __truediv__(self, value: float) -&gt; Self:\n        \"\"\"Return the quotient of the point and a scalar.\"\"\"\n    def __floordiv__(self, value: float) -&gt; Self:\n        \"\"\"Return the floored quotient of the point and a scalar.\"\"\"\n    def __neg__(self) -&gt; Self:\n        \"\"\"Return the negative of the point.\"\"\"\n    def __round__(self, ndigits: int | None) -&gt; Self:\n        \"\"\"Return the point with rounded coordinates.\"\"\"\n    def __eq__(self, other: object) -&gt; bool:\n        \"\"\"Return True if the point is equal to another object.\"\"\"\n    def __ne__(self, value: object) -&gt; bool:\n        \"\"\"Return True if the point is not equal to another object.\"\"\"\n    def __lt__(self, other: object) -&gt; bool:\n        \"\"\"Return True if the point is less than another object.\"\"\"\n    def __le__(self, other: object) -&gt; bool:\n        \"\"\"Return True if the point is less than or equal to another object.\"\"\"\n    def __gt__(self, other: object) -&gt; bool:\n        \"\"\"Return True if the point is greater than another object.\"\"\"\n    def __ge__(self, other: object) -&gt; bool:\n        \"\"\"Return True if the point is greater than or equal to another object.\"\"\"\n    def __hash__(self) -&gt; int:\n        \"\"\"Return the hash of the point.\"\"\"\n    def __iter__(self) -&gt; PointIterator:\n        \"\"\"Return an iterator over the coordinates of the point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.x","title":"x  <code>property</code>","text":"<pre><code>x: float\n</code></pre> <p>Return the x coordinate.</p>"},{"location":"python-api/point/#gdsr._gdsr.Point.y","title":"y  <code>property</code>","text":"<pre><code>y: float\n</code></pre> <p>Return the y coordinate.</p>"},{"location":"python-api/point/#gdsr._gdsr.Point.__init__","title":"__init__","text":"<pre><code>__init__(x: float, y: float) -&gt; None\n</code></pre> <p>Initialize the Point with x and y coordinates.</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>float</code>)           \u2013            <p>x coordinate</p> </li> <li> <code>y</code>               (<code>float</code>)           \u2013            <p>y coordinate</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __init__(self, x: float, y: float) -&gt; None:\n    \"\"\"Initialize the Point with x and y coordinates.\n\n    :param float x: x coordinate\n    :param float y: y coordinate\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.distance_to","title":"distance_to","text":"<pre><code>distance_to(other: PointLike) -&gt; float\n</code></pre> <p>Return the distance to another point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def distance_to(self, other: PointLike) -&gt; float:\n    \"\"\"Return the distance to another point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.cross","title":"cross","text":"<pre><code>cross(other: PointLike) -&gt; float\n</code></pre> <p>Return the cross product with another point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def cross(self, other: PointLike) -&gt; float:\n    \"\"\"Return the cross product with another point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.copy","title":"copy","text":"<pre><code>copy() -&gt; Self\n</code></pre> <p>Return a copy of the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def copy(self) -&gt; Self:\n    \"\"\"Return a copy of the point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.rotate","title":"rotate","text":"<pre><code>rotate(angle: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Rotates the point by an angle around a centre point.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Counter-clockwise rotation angle in degrees.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of rotation, defaults to Point(0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Rotates the point by an angle around a centre point.\n\n    :param float angle: Counter-clockwise rotation angle in degrees.\n    :param PointLike centre: Centre point of rotation, defaults to Point(0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.scale","title":"scale","text":"<pre><code>scale(factor: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Scales the point by a factor around a centre point.</p> <p>Parameters:</p> <ul> <li> <code>factor</code>               (<code>float</code>)           \u2013            <p>Scaling factor.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of scaling, defaults to Point(0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Scales the point by a factor around a centre point.\n\n    :param float factor: Scaling factor.\n    :param PointLike centre: Centre point of scaling, defaults to Point(0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.round","title":"round","text":"<pre><code>round(digits: int = 0) -&gt; Self\n</code></pre> <p>Return the point with rounded coordinates.</p> <p>Parameters:</p> <ul> <li> <code>digits</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Number of digits to round to, defaults to None.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def round(self, digits: int = 0) -&gt; Self:\n    \"\"\"Return the point with rounded coordinates.\n\n    :param int digits: Number of digits to round to, defaults to None.\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.angle_to","title":"angle_to","text":"<pre><code>angle_to(other: PointLike) -&gt; float | None\n</code></pre> <p>Return the angle to another point in degrees.</p> <p>The angle is measured counter-clockwise from the x-axis and is in the range of 0 to 360 degrees.</p> <p>Return None if the points are the same.</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>PointLike</code>)           \u2013            <p>The other point.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def angle_to(self, other: PointLike) -&gt; float | None:\n    \"\"\"Return the angle to another point in degrees.\n\n    The angle is measured counter-clockwise from the x-axis\n    and is in the range of 0 to 360 degrees.\n\n    Return None if the points are the same.\n\n    :param PointLike other: The other point.\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.is_close","title":"is_close","text":"<pre><code>is_close(other: PointLike, rel_tol: float = 1e-07, abs_tol: float = 1e-10) -&gt; bool\n</code></pre> <p>Return True if the point is close to another point.</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>PointLike</code>)           \u2013            <p>The other point.</p> </li> <li> <code>rel_tol</code>               (<code>float</code>, default:                   <code>1e-07</code> )           \u2013            <p>Relative tolerance, defaults to 1e-9.</p> </li> <li> <code>abs_tol</code>               (<code>float</code>, default:                   <code>1e-10</code> )           \u2013            <p>Absolute tolerance, defaults to 0.0.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def is_close(\n    self, other: PointLike, rel_tol: float = 1e-7, abs_tol: float = 1e-10\n) -&gt; bool:\n    \"\"\"Return True if the point is close to another point.\n\n    :param PointLike other: The other point.\n    :param float rel_tol: Relative tolerance, defaults to 1e-9.\n    :param float abs_tol: Absolute tolerance, defaults to 0.0.\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.epsilon_is_close","title":"epsilon_is_close","text":"<pre><code>epsilon_is_close(other: PointLike) -&gt; bool\n</code></pre> <p>Return True if the point is close to another point using epsilon.</p> <p>This is used in all equality checks in gdsr.</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>PointLike</code>)           \u2013            <p>The other point.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def epsilon_is_close(self, other: PointLike) -&gt; bool:\n    \"\"\"Return True if the point is close to another point using epsilon.\n\n    This is used in all equality checks in gdsr.\n\n    :param PointLike other: The other point.\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.reflect","title":"reflect","text":"<pre><code>reflect(angle: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Reflect the point across a line defined by an angle around a centre point.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Angle of the line in degrees.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of reflection, defaults to Point(0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def reflect(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Reflect the point across a line defined by an angle around a centre point.\n\n    :param float angle: Angle of the line in degrees.\n    :param PointLike centre: Centre point of reflection, defaults to Point(0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(index: Literal[0, 1]) -&gt; float\n</code></pre> <p>Return the x or y coordinate of the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __getitem__(self, index: Literal[0, 1]) -&gt; float:\n    \"\"\"Return the x or y coordinate of the point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__bool__","title":"__bool__","text":"<pre><code>__bool__() -&gt; bool\n</code></pre> <p>Return True if the point is not the origin.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __bool__(self) -&gt; bool:\n    \"\"\"Return True if the point is not the origin.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__add__","title":"__add__","text":"<pre><code>__add__(other: PointLike) -&gt; Self\n</code></pre> <p>Return the sum of the point and another point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __add__(self, other: PointLike) -&gt; Self:\n    \"\"\"Return the sum of the point and another point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__radd__","title":"__radd__","text":"<pre><code>__radd__(other: PointLike) -&gt; Self\n</code></pre> <p>Return the sum of the point and another point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __radd__(self, other: PointLike) -&gt; Self:\n    \"\"\"Return the sum of the point and another point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__sub__","title":"__sub__","text":"<pre><code>__sub__(other: PointLike) -&gt; Self\n</code></pre> <p>Return the difference of the point and another point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __sub__(self, other: PointLike) -&gt; Self:\n    \"\"\"Return the difference of the point and another point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__rsub__","title":"__rsub__","text":"<pre><code>__rsub__(other: PointLike) -&gt; Self\n</code></pre> <p>Return the difference of the point and another point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __rsub__(self, other: PointLike) -&gt; Self:\n    \"\"\"Return the difference of the point and another point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__mul__","title":"__mul__","text":"<pre><code>__mul__(value: float) -&gt; Self\n</code></pre> <p>Return the product of the point and a scalar.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __mul__(self, value: float) -&gt; Self:\n    \"\"\"Return the product of the point and a scalar.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__rmul__","title":"__rmul__","text":"<pre><code>__rmul__(value: float) -&gt; Self\n</code></pre> <p>Return the product of the point and a scalar.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __rmul__(self, value: float) -&gt; Self:\n    \"\"\"Return the product of the point and a scalar.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__truediv__","title":"__truediv__","text":"<pre><code>__truediv__(value: float) -&gt; Self\n</code></pre> <p>Return the quotient of the point and a scalar.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __truediv__(self, value: float) -&gt; Self:\n    \"\"\"Return the quotient of the point and a scalar.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__floordiv__","title":"__floordiv__","text":"<pre><code>__floordiv__(value: float) -&gt; Self\n</code></pre> <p>Return the floored quotient of the point and a scalar.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __floordiv__(self, value: float) -&gt; Self:\n    \"\"\"Return the floored quotient of the point and a scalar.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__neg__","title":"__neg__","text":"<pre><code>__neg__() -&gt; Self\n</code></pre> <p>Return the negative of the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __neg__(self) -&gt; Self:\n    \"\"\"Return the negative of the point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__round__","title":"__round__","text":"<pre><code>__round__(ndigits: int | None) -&gt; Self\n</code></pre> <p>Return the point with rounded coordinates.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __round__(self, ndigits: int | None) -&gt; Self:\n    \"\"\"Return the point with rounded coordinates.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__eq__","title":"__eq__","text":"<pre><code>__eq__(other: object) -&gt; bool\n</code></pre> <p>Return True if the point is equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __eq__(self, other: object) -&gt; bool:\n    \"\"\"Return True if the point is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__ne__","title":"__ne__","text":"<pre><code>__ne__(value: object) -&gt; bool\n</code></pre> <p>Return True if the point is not equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __ne__(self, value: object) -&gt; bool:\n    \"\"\"Return True if the point is not equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__lt__","title":"__lt__","text":"<pre><code>__lt__(other: object) -&gt; bool\n</code></pre> <p>Return True if the point is less than another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __lt__(self, other: object) -&gt; bool:\n    \"\"\"Return True if the point is less than another object.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__le__","title":"__le__","text":"<pre><code>__le__(other: object) -&gt; bool\n</code></pre> <p>Return True if the point is less than or equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __le__(self, other: object) -&gt; bool:\n    \"\"\"Return True if the point is less than or equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__gt__","title":"__gt__","text":"<pre><code>__gt__(other: object) -&gt; bool\n</code></pre> <p>Return True if the point is greater than another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __gt__(self, other: object) -&gt; bool:\n    \"\"\"Return True if the point is greater than another object.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__ge__","title":"__ge__","text":"<pre><code>__ge__(other: object) -&gt; bool\n</code></pre> <p>Return True if the point is greater than or equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __ge__(self, other: object) -&gt; bool:\n    \"\"\"Return True if the point is greater than or equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__hash__","title":"__hash__","text":"<pre><code>__hash__() -&gt; int\n</code></pre> <p>Return the hash of the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __hash__(self) -&gt; int:\n    \"\"\"Return the hash of the point.\"\"\"\n</code></pre>"},{"location":"python-api/point/#gdsr._gdsr.Point.__iter__","title":"__iter__","text":"<pre><code>__iter__() -&gt; PointIterator\n</code></pre> <p>Return an iterator over the coordinates of the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __iter__(self) -&gt; PointIterator:\n    \"\"\"Return an iterator over the coordinates of the point.\"\"\"\n</code></pre>"},{"location":"python-api/typings/","title":"Typings","text":""},{"location":"python-api/typings/#pointlike","title":"PointLike","text":"<p>A object that supports indexing at positions 0 and 1 and returns float values.</p> <p>It is recommended to use the gdsr.Point class but other types are also supported.</p> <p>Examples:</p> <pre><code>1. Using a list:\n    &gt;&gt;&gt; point = [1.0, 2.0]\n    &gt;&gt;&gt; assert isinstance(point, PointLike)\n    &gt;&gt;&gt; point[0]\n    1.0\n    &gt;&gt;&gt; point[1]\n    2.0\n\n2. Using a tuple:\n    &gt;&gt;&gt; point = (3.0, 4.0)\n    &gt;&gt;&gt; assert isinstance(point, PointLike)\n    &gt;&gt;&gt; point[0]\n    3.0\n    &gt;&gt;&gt; point[1]\n    4.0\n\n3. Using a dictionary:\n    &gt;&gt;&gt; point = {0: 5.0, 1: 6.0}\n    &gt;&gt;&gt; assert isinstance(point, PointLike)\n    &gt;&gt;&gt; point[0]\n    5.0\n    &gt;&gt;&gt; point[1]\n    6.0\n\n4. Using the gdsr Point :\n    &gt;&gt;&gt; from gdsr import Point\n    &gt;&gt;&gt; point = Point(7.0, 8.0)\n    &gt;&gt;&gt; assert isinstance(point, PointLike)\n    &gt;&gt;&gt; point[0]\n    7.0\n    &gt;&gt;&gt; point[1]\n    8.0\n</code></pre>"},{"location":"python-api/typings/#inputpointslike","title":"InputPointsLike","text":"<p>A Iterable of objects that support indexing at positions 0 and 1 and return float values.</p> <p>It is recommended to use a list of the gdsr.Point class but other types are also supported.</p> <p>Examples:</p> <pre><code>1. Using a list of PointLike objects:\n    &gt;&gt;&gt; points = [[1.0, 2.0], [3.0, 4.0]]\n    &gt;&gt;&gt; isinstance(points, InputPointsLike)\n    True\n    &gt;&gt;&gt; points[0][0]\n    1.0\n    &gt;&gt;&gt; points[1][1]\n    4.0\n\n2. Using a tuple of PointLike objects:\n    &gt;&gt;&gt; points = ((5.0, 6.0), (7.0, 8.0))\n    &gt;&gt;&gt; isinstance(points, InputPointsLike)\n    True\n    &gt;&gt;&gt; points[0][1]\n    6.0\n    &gt;&gt;&gt; points[1][0]\n    7.0\n\n3. Using a list containing a mix of PointLike types:\n    &gt;&gt;&gt; points = [{0: 9.0, 1: 10.0}, (11.0, 12.0)]\n    &gt;&gt;&gt; isinstance(points, InputPointsLike)\n    True\n    &gt;&gt;&gt; points[0][0]\n    9.0\n    &gt;&gt;&gt; points[1][1]\n    12.0\n\n4. Using a list of gdsr Point objects:\n    &gt;&gt;&gt; from gdsr import Point\n    &gt;&gt;&gt; points = [Point(13.0, 14.0), Point(15.0, 16.0)]\n    &gt;&gt;&gt; isinstance(points, InputPointsLike)\n    True\n    &gt;&gt;&gt; points[0][0]\n    13.0\n    &gt;&gt;&gt; points[1][1]\n    16.0\n</code></pre>"},{"location":"python-api/typings/#instance","title":"Instance","text":"<p>Type alias for a GDSII instance.</p>"},{"location":"python-api/typings/#element","title":"Element","text":"<p>Type alias for a GDSII element.</p>"},{"location":"python-api/typings/#layer-data-type-pair","title":"Layer Data Type Pair","text":"<p>A tuple containing a layer and a data type.</p>"},{"location":"python-api/elements/path/","title":"Path","text":""},{"location":"python-api/elements/path/#path_1","title":"Path","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class Path:\n    @property\n    def points(self) -&gt; list[Point]:\n        \"\"\"Return the points of the path.\"\"\"\n    @points.setter\n    def points(self, points: InputPointsLike) -&gt; None:\n        \"\"\"Set the points of the path.\"\"\"\n    layer: Layer\n    data_type: DataType\n    path_type: PathType | None\n    width: float | None\n    def __init__(\n        self,\n        points: InputPointsLike,\n        layer: Layer = 0,\n        data_type: DataType = 0,\n        path_type: PathType | None = None,\n        width: float | None = None,\n    ) -&gt; None: ...\n    @property\n    def length(self) -&gt; float:\n        \"\"\"Return the length of the path.\"\"\"\n    @property\n    def bounding_box(self) -&gt; tuple[Point, Point]:\n        \"\"\"Return the bounding box of the path.\"\"\"\n    def set_points(self, points: InputPointsLike) -&gt; Self:\n        \"\"\"Set the points of the path.\"\"\"\n    def set_layer(self, layer: Layer) -&gt; Self:\n        \"\"\"Set the layer of the path.\"\"\"\n    def set_data_type(self, data_type: DataType) -&gt; Self:\n        \"\"\"Set the data type of the path.\"\"\"\n    def set_path_type(self, path_type: PathType | None) -&gt; Self:\n        \"\"\"Set the path type of the path.\"\"\"\n    def set_width(self, width: float | None) -&gt; Self:\n        \"\"\"Set the width of the path.\"\"\"\n\n    def copy(self) -&gt; Self:\n        \"\"\"Return a copy of the path.\"\"\"\n    def move_to(self, point: PointLike) -&gt; Self:\n        \"\"\"Move the path to a point.\n\n        This method modifies the path in place and returns itself.\n\n        :param PointLike point: Point to move the path to.\n        \"\"\"\n    def move_by(self, vector: PointLike) -&gt; Self:\n        \"\"\"Move the path by a vector.\n\n        This method modifies the path in place and returns itself.\n\n        :param PointLike vector: Vector to move the path by.\n        \"\"\"\n    def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Rotate the path by an angle around a centre point.\n\n        This method modifies the path in place and returns itself.\n\n        :param float angle: Counter-clockwise rotation angle in degrees.\n        :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n        \"\"\"\n    def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Scale the path by a factor around a centre point.\n\n        This method modifies the path in place and returns itself.\n\n        :param float factor: Scaling factor.\n        :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n        \"\"\"\n    def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n        \"\"\"Return True if the path is on any of the specified layer, data_type pairs.\"\"\"\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the path.\"\"\"\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the path.\"\"\"\n    def __eq__(self, value: object) -&gt; bool:\n        \"\"\"Return True if the path is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.points","title":"points  <code>property</code> <code>writable</code>","text":"<pre><code>points: list[Point]\n</code></pre> <p>Return the points of the path.</p>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.layer","title":"layer  <code>instance-attribute</code>","text":"<pre><code>layer: Layer\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.data_type","title":"data_type  <code>instance-attribute</code>","text":"<pre><code>data_type: DataType\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.path_type","title":"path_type  <code>instance-attribute</code>","text":"<pre><code>path_type: PathType | None\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width: float | None\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.length","title":"length  <code>property</code>","text":"<pre><code>length: float\n</code></pre> <p>Return the length of the path.</p>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.bounding_box","title":"bounding_box  <code>property</code>","text":"<pre><code>bounding_box: tuple[Point, Point]\n</code></pre> <p>Return the bounding box of the path.</p>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.__init__","title":"__init__","text":"<pre><code>__init__(points: InputPointsLike, layer: Layer = 0, data_type: DataType = 0, path_type: PathType | None = None, width: float | None = None) -&gt; None\n</code></pre> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __init__(\n    self,\n    points: InputPointsLike,\n    layer: Layer = 0,\n    data_type: DataType = 0,\n    path_type: PathType | None = None,\n    width: float | None = None,\n) -&gt; None: ...\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.set_points","title":"set_points","text":"<pre><code>set_points(points: InputPointsLike) -&gt; Self\n</code></pre> <p>Set the points of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_points(self, points: InputPointsLike) -&gt; Self:\n    \"\"\"Set the points of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.set_layer","title":"set_layer","text":"<pre><code>set_layer(layer: Layer) -&gt; Self\n</code></pre> <p>Set the layer of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_layer(self, layer: Layer) -&gt; Self:\n    \"\"\"Set the layer of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.set_data_type","title":"set_data_type","text":"<pre><code>set_data_type(data_type: DataType) -&gt; Self\n</code></pre> <p>Set the data type of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_data_type(self, data_type: DataType) -&gt; Self:\n    \"\"\"Set the data type of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.set_path_type","title":"set_path_type","text":"<pre><code>set_path_type(path_type: PathType | None) -&gt; Self\n</code></pre> <p>Set the path type of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_path_type(self, path_type: PathType | None) -&gt; Self:\n    \"\"\"Set the path type of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.set_width","title":"set_width","text":"<pre><code>set_width(width: float | None) -&gt; Self\n</code></pre> <p>Set the width of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_width(self, width: float | None) -&gt; Self:\n    \"\"\"Set the width of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.copy","title":"copy","text":"<pre><code>copy() -&gt; Self\n</code></pre> <p>Return a copy of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def copy(self) -&gt; Self:\n    \"\"\"Return a copy of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.move_to","title":"move_to","text":"<pre><code>move_to(point: PointLike) -&gt; Self\n</code></pre> <p>Move the path to a point.</p> <p>This method modifies the path in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>point</code>               (<code>PointLike</code>)           \u2013            <p>Point to move the path to.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_to(self, point: PointLike) -&gt; Self:\n    \"\"\"Move the path to a point.\n\n    This method modifies the path in place and returns itself.\n\n    :param PointLike point: Point to move the path to.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.move_by","title":"move_by","text":"<pre><code>move_by(vector: PointLike) -&gt; Self\n</code></pre> <p>Move the path by a vector.</p> <p>This method modifies the path in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>vector</code>               (<code>PointLike</code>)           \u2013            <p>Vector to move the path by.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_by(self, vector: PointLike) -&gt; Self:\n    \"\"\"Move the path by a vector.\n\n    This method modifies the path in place and returns itself.\n\n    :param PointLike vector: Vector to move the path by.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.rotate","title":"rotate","text":"<pre><code>rotate(angle: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Rotate the path by an angle around a centre point.</p> <p>This method modifies the path in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Counter-clockwise rotation angle in degrees.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of rotation, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Rotate the path by an angle around a centre point.\n\n    This method modifies the path in place and returns itself.\n\n    :param float angle: Counter-clockwise rotation angle in degrees.\n    :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.scale","title":"scale","text":"<pre><code>scale(factor: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Scale the path by a factor around a centre point.</p> <p>This method modifies the path in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>factor</code>               (<code>float</code>)           \u2013            <p>Scaling factor.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of scaling, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Scale the path by a factor around a centre point.\n\n    This method modifies the path in place and returns itself.\n\n    :param float factor: Scaling factor.\n    :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.is_on","title":"is_on","text":"<pre><code>is_on(*layer_data_types: LayerDataType) -&gt; bool\n</code></pre> <p>Return True if the path is on any of the specified layer, data_type pairs.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n    \"\"\"Return True if the path is on any of the specified layer, data_type pairs.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the path.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the path.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.Path.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Return True if the path is equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"Return True if the path is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#pathtype","title":"PathType","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class PathType(Enum):\n    Square = 0\n    Round = 1\n    Overlap = 2\n\n    @staticmethod\n    def values() -&gt; list[PathType]:\n        \"\"\"Return a list of all PathType values.\"\"\"\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.PathType.Square","title":"Square  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Square = 0\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.PathType.Round","title":"Round  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Round = 1\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.PathType.Overlap","title":"Overlap  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Overlap = 2\n</code></pre>"},{"location":"python-api/elements/path/#gdsr._gdsr.PathType.values","title":"values  <code>staticmethod</code>","text":"<pre><code>values() -&gt; list[PathType]\n</code></pre> <p>Return a list of all PathType values.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>@staticmethod\ndef values() -&gt; list[PathType]:\n    \"\"\"Return a list of all PathType values.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/","title":"Polygon","text":"<p>Polygon object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class Polygon:\n    \"\"\"Polygon object.\"\"\"\n\n    @property\n    def points(self) -&gt; list[Point]:\n        \"\"\"Return the points of the polygon.\"\"\"\n    @points.setter\n    def points(self, points: InputPointsLike) -&gt; None:\n        \"\"\"Set the points of the polygon.\"\"\"\n    layer: Layer\n    \"\"\"The layer of the polygon.\"\"\"\n    data_type: DataType\n    \"\"\"The data type of the polygon.\"\"\"\n    def __init__(\n        self, points: InputPointsLike, layer: Layer = 0, data_type: DataType = 0\n    ) -&gt; None:\n        \"\"\"Initialize the Polygon.\n\n        If the first and last points are not the same,\n        the first point is appended to the end, to ensure that the polygon is closed.\n\n        :param InputPointsLike points: Polygon vertices. Sequence of objects that are\n        indexable at 0 and 1. Must not be empty\n        :param Layer layer: Polygon layer, defaults to 0\n        :param DataType data_type: Polygon data_type, defaults to 0\n        \"\"\"\n    @property\n    def bounding_box(self) -&gt; tuple[Point, Point]:\n        \"\"\"Return the bounding box of the polygon.\"\"\"\n    @property\n    def area(self) -&gt; float:\n        \"\"\"Return the area of the polygon.\"\"\"\n    @property\n    def perimeter(self) -&gt; float:\n        \"\"\"Return the perimeter of the polygon.\"\"\"\n    def set_points(self, points: InputPointsLike) -&gt; Self:\n        \"\"\"Set the points of the polygon.\n\n        If the first and last points are not the same,\n        the first point is appended to the end, to ensure that the polygon is closed.\n\n        :param InputPointsLike points: Polygon vertices. Sequence of objects that are\n        indexable at 0 and 1. Must not be empty\n        \"\"\"\n    def set_layer(self, layer: Layer) -&gt; Self:\n        \"\"\"Set the layer of the polygon.\"\"\"\n    def set_data_type(self, data_type: DataType) -&gt; Self:\n        \"\"\"Set the data type of the polygon.\"\"\"\n\n    def contains(self, point: PointLike) -&gt; bool:\n        \"\"\"Return True if the polygon contains the point.\"\"\"\n    def contains_all(self, *points: PointLike) -&gt; bool:\n        \"\"\"Return True if the polygon contains all of the points.\"\"\"\n    def contains_any(self, *points: PointLike) -&gt; bool:\n        \"\"\"Return True if the polygon contains any of the points.\"\"\"\n    def on_edge(self, point: PointLike) -&gt; bool:\n        \"\"\"Return True if the point is on the edge of the polygon.\"\"\"\n    def on_edge_all(self, *points: PointLike) -&gt; bool:\n        \"\"\"Return True if all of the points are on the edge of the polygon.\"\"\"\n    def on_edge_any(self, *points: PointLike) -&gt; bool:\n        \"\"\"Return True if any of the points are on the edge of the polygon.\"\"\"\n    def intersects(self, other: Polygon) -&gt; bool:\n        \"\"\"Return True if the polygon intersects with another polygon.\"\"\"\n    def visualize(self) -&gt; None:\n        \"\"\"Visualises the polygon in your default web browser.\"\"\"\n    def copy(self) -&gt; Self:\n        \"\"\"Return a copy of the polygon.\"\"\"\n    def move_to(self, point: PointLike) -&gt; Self:\n        \"\"\"Move the polygon to a point.\n\n        This method modifies the polygon in place and returns itself.\n\n        :param PointLike point: Point to move the polygon to.\n        \"\"\"\n    def move_by(self, vector: PointLike) -&gt; Self:\n        \"\"\"Move the polygon by a vector.\n\n        This method modifies the polygon in place and returns itself.\n\n        :param PointLike vector: Vector to move the polygon by.\n        \"\"\"\n    def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Rotate the polygon by an angle around a centre point.\n\n        This method modifies the polygon in place and returns itself.\n\n        :param float angle: Counter-clockwise rotation angle in degrees.\n        :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n        \"\"\"\n    def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Scale the polygon by a factor around a centre point.\n\n        This method modifies the polygon in place and returns itself.\n\n        :param float factor: Scaling factor.\n        :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n        \"\"\"\n    def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n        \"\"\"Return True if the polygon is on any of the layer, data_type pairs.\"\"\"\n    @staticmethod\n    def regular(\n        centre: PointLike,\n        radius: float,\n        n_sides: int,\n        rotation: float = 0,\n        layer: int = 0,\n        data_type: int = 0,\n    ) -&gt; Polygon:\n        \"\"\"Return a regular polygon.\n\n        :param PointLike centre: Centre of the polygon.\n        :param float radius: Radius of the polygon.\n        :param int n_sides: Number of sides of the polygon.\n        :param float rotation: Rotation of the polygon in degrees.\n        :param int layer: Layer of the polygon, defaults to 0.\n        :param int data_type: Data type of the polygon, defaults to 0.\n        \"\"\"\n    @staticmethod\n    def ellipse(\n        centre: PointLike,\n        horizontal_radius: float,\n        vertical_radius: float | None = None,\n        initial_angle: float = 0.0,\n        final_angle: float = 360.0,\n        n_sides: int = 400,\n        layer: int = 0,\n        data_type: int = 0,\n    ) -&gt; Polygon:\n        \"\"\"Return an ellipse.\n\n        :param PointLike centre: Centre of the ellipse.\n        :param float radius: Radius of the ellipse.\n        :param float initial_angle: Initial angle  in degrees, defaults to 0.\n        :param float final_angle: Final angle in degrees, defaults to 0.\n        :param int n_sides: Number of sides of the ellipse, defaults to 400.\n        :param int layer: Layer of the ellipse, defaults to 0.\n        :param int data_type: Data type of the ellipse, defaults to 0.\n        \"\"\"\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the polygon.\"\"\"\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the polygon.\"\"\"\n    def __eq__(self, value: object) -&gt; bool:\n        \"\"\"Return True if the polygon is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.points","title":"points  <code>property</code> <code>writable</code>","text":"<pre><code>points: list[Point]\n</code></pre> <p>Return the points of the polygon.</p>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.layer","title":"layer  <code>instance-attribute</code>","text":"<pre><code>layer: Layer\n</code></pre> <p>The layer of the polygon.</p>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.data_type","title":"data_type  <code>instance-attribute</code>","text":"<pre><code>data_type: DataType\n</code></pre> <p>The data type of the polygon.</p>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.bounding_box","title":"bounding_box  <code>property</code>","text":"<pre><code>bounding_box: tuple[Point, Point]\n</code></pre> <p>Return the bounding box of the polygon.</p>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.area","title":"area  <code>property</code>","text":"<pre><code>area: float\n</code></pre> <p>Return the area of the polygon.</p>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.perimeter","title":"perimeter  <code>property</code>","text":"<pre><code>perimeter: float\n</code></pre> <p>Return the perimeter of the polygon.</p>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.__init__","title":"__init__","text":"<pre><code>__init__(points: InputPointsLike, layer: Layer = 0, data_type: DataType = 0) -&gt; None\n</code></pre> <p>Initialize the Polygon.</p> <p>If the first and last points are not the same, the first point is appended to the end, to ensure that the polygon is closed.</p> <p>Parameters:</p> <ul> <li> <code>points</code>               (<code>InputPointsLike</code>)           \u2013            <p>Polygon vertices. Sequence of objects that are indexable at 0 and 1. Must not be empty</p> </li> <li> <code>layer</code>               (<code>Layer</code>, default:                   <code>0</code> )           \u2013            <p>Polygon layer, defaults to 0</p> </li> <li> <code>data_type</code>               (<code>DataType</code>, default:                   <code>0</code> )           \u2013            <p>Polygon data_type, defaults to 0</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __init__(\n    self, points: InputPointsLike, layer: Layer = 0, data_type: DataType = 0\n) -&gt; None:\n    \"\"\"Initialize the Polygon.\n\n    If the first and last points are not the same,\n    the first point is appended to the end, to ensure that the polygon is closed.\n\n    :param InputPointsLike points: Polygon vertices. Sequence of objects that are\n    indexable at 0 and 1. Must not be empty\n    :param Layer layer: Polygon layer, defaults to 0\n    :param DataType data_type: Polygon data_type, defaults to 0\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.set_points","title":"set_points","text":"<pre><code>set_points(points: InputPointsLike) -&gt; Self\n</code></pre> <p>Set the points of the polygon.</p> <p>If the first and last points are not the same, the first point is appended to the end, to ensure that the polygon is closed.</p> <p>Parameters:</p> <ul> <li> <code>points</code>               (<code>InputPointsLike</code>)           \u2013            <p>Polygon vertices. Sequence of objects that are indexable at 0 and 1. Must not be empty</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_points(self, points: InputPointsLike) -&gt; Self:\n    \"\"\"Set the points of the polygon.\n\n    If the first and last points are not the same,\n    the first point is appended to the end, to ensure that the polygon is closed.\n\n    :param InputPointsLike points: Polygon vertices. Sequence of objects that are\n    indexable at 0 and 1. Must not be empty\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.set_layer","title":"set_layer","text":"<pre><code>set_layer(layer: Layer) -&gt; Self\n</code></pre> <p>Set the layer of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_layer(self, layer: Layer) -&gt; Self:\n    \"\"\"Set the layer of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.set_data_type","title":"set_data_type","text":"<pre><code>set_data_type(data_type: DataType) -&gt; Self\n</code></pre> <p>Set the data type of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_data_type(self, data_type: DataType) -&gt; Self:\n    \"\"\"Set the data type of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.contains","title":"contains","text":"<pre><code>contains(point: PointLike) -&gt; bool\n</code></pre> <p>Return True if the polygon contains the point.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def contains(self, point: PointLike) -&gt; bool:\n    \"\"\"Return True if the polygon contains the point.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.contains_all","title":"contains_all","text":"<pre><code>contains_all(*points: PointLike) -&gt; bool\n</code></pre> <p>Return True if the polygon contains all of the points.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def contains_all(self, *points: PointLike) -&gt; bool:\n    \"\"\"Return True if the polygon contains all of the points.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.contains_any","title":"contains_any","text":"<pre><code>contains_any(*points: PointLike) -&gt; bool\n</code></pre> <p>Return True if the polygon contains any of the points.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def contains_any(self, *points: PointLike) -&gt; bool:\n    \"\"\"Return True if the polygon contains any of the points.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.on_edge","title":"on_edge","text":"<pre><code>on_edge(point: PointLike) -&gt; bool\n</code></pre> <p>Return True if the point is on the edge of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def on_edge(self, point: PointLike) -&gt; bool:\n    \"\"\"Return True if the point is on the edge of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.on_edge_all","title":"on_edge_all","text":"<pre><code>on_edge_all(*points: PointLike) -&gt; bool\n</code></pre> <p>Return True if all of the points are on the edge of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def on_edge_all(self, *points: PointLike) -&gt; bool:\n    \"\"\"Return True if all of the points are on the edge of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.on_edge_any","title":"on_edge_any","text":"<pre><code>on_edge_any(*points: PointLike) -&gt; bool\n</code></pre> <p>Return True if any of the points are on the edge of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def on_edge_any(self, *points: PointLike) -&gt; bool:\n    \"\"\"Return True if any of the points are on the edge of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.intersects","title":"intersects","text":"<pre><code>intersects(other: Polygon) -&gt; bool\n</code></pre> <p>Return True if the polygon intersects with another polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def intersects(self, other: Polygon) -&gt; bool:\n    \"\"\"Return True if the polygon intersects with another polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.visualize","title":"visualize","text":"<pre><code>visualize() -&gt; None\n</code></pre> <p>Visualises the polygon in your default web browser.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def visualize(self) -&gt; None:\n    \"\"\"Visualises the polygon in your default web browser.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.copy","title":"copy","text":"<pre><code>copy() -&gt; Self\n</code></pre> <p>Return a copy of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def copy(self) -&gt; Self:\n    \"\"\"Return a copy of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.move_to","title":"move_to","text":"<pre><code>move_to(point: PointLike) -&gt; Self\n</code></pre> <p>Move the polygon to a point.</p> <p>This method modifies the polygon in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>point</code>               (<code>PointLike</code>)           \u2013            <p>Point to move the polygon to.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_to(self, point: PointLike) -&gt; Self:\n    \"\"\"Move the polygon to a point.\n\n    This method modifies the polygon in place and returns itself.\n\n    :param PointLike point: Point to move the polygon to.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.move_by","title":"move_by","text":"<pre><code>move_by(vector: PointLike) -&gt; Self\n</code></pre> <p>Move the polygon by a vector.</p> <p>This method modifies the polygon in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>vector</code>               (<code>PointLike</code>)           \u2013            <p>Vector to move the polygon by.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_by(self, vector: PointLike) -&gt; Self:\n    \"\"\"Move the polygon by a vector.\n\n    This method modifies the polygon in place and returns itself.\n\n    :param PointLike vector: Vector to move the polygon by.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.rotate","title":"rotate","text":"<pre><code>rotate(angle: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Rotate the polygon by an angle around a centre point.</p> <p>This method modifies the polygon in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Counter-clockwise rotation angle in degrees.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of rotation, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Rotate the polygon by an angle around a centre point.\n\n    This method modifies the polygon in place and returns itself.\n\n    :param float angle: Counter-clockwise rotation angle in degrees.\n    :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.scale","title":"scale","text":"<pre><code>scale(factor: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Scale the polygon by a factor around a centre point.</p> <p>This method modifies the polygon in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>factor</code>               (<code>float</code>)           \u2013            <p>Scaling factor.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of scaling, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Scale the polygon by a factor around a centre point.\n\n    This method modifies the polygon in place and returns itself.\n\n    :param float factor: Scaling factor.\n    :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.is_on","title":"is_on","text":"<pre><code>is_on(*layer_data_types: LayerDataType) -&gt; bool\n</code></pre> <p>Return True if the polygon is on any of the layer, data_type pairs.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n    \"\"\"Return True if the polygon is on any of the layer, data_type pairs.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.regular","title":"regular  <code>staticmethod</code>","text":"<pre><code>regular(centre: PointLike, radius: float, n_sides: int, rotation: float = 0, layer: int = 0, data_type: int = 0) -&gt; Polygon\n</code></pre> <p>Return a regular polygon.</p> <p>Parameters:</p> <ul> <li> <code>centre</code>               (<code>PointLike</code>)           \u2013            <p>Centre of the polygon.</p> </li> <li> <code>radius</code>               (<code>float</code>)           \u2013            <p>Radius of the polygon.</p> </li> <li> <code>n_sides</code>               (<code>int</code>)           \u2013            <p>Number of sides of the polygon.</p> </li> <li> <code>rotation</code>               (<code>float</code>, default:                   <code>0</code> )           \u2013            <p>Rotation of the polygon in degrees.</p> </li> <li> <code>layer</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Layer of the polygon, defaults to 0.</p> </li> <li> <code>data_type</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Data type of the polygon, defaults to 0.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>@staticmethod\ndef regular(\n    centre: PointLike,\n    radius: float,\n    n_sides: int,\n    rotation: float = 0,\n    layer: int = 0,\n    data_type: int = 0,\n) -&gt; Polygon:\n    \"\"\"Return a regular polygon.\n\n    :param PointLike centre: Centre of the polygon.\n    :param float radius: Radius of the polygon.\n    :param int n_sides: Number of sides of the polygon.\n    :param float rotation: Rotation of the polygon in degrees.\n    :param int layer: Layer of the polygon, defaults to 0.\n    :param int data_type: Data type of the polygon, defaults to 0.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.ellipse","title":"ellipse  <code>staticmethod</code>","text":"<pre><code>ellipse(centre: PointLike, horizontal_radius: float, vertical_radius: float | None = None, initial_angle: float = 0.0, final_angle: float = 360.0, n_sides: int = 400, layer: int = 0, data_type: int = 0) -&gt; Polygon\n</code></pre> <p>Return an ellipse.</p> <p>Parameters:</p> <ul> <li> <code>centre</code>               (<code>PointLike</code>)           \u2013            <p>Centre of the ellipse.</p> </li> <li> <code>radius</code>               (<code>float</code>)           \u2013            <p>Radius of the ellipse.</p> </li> <li> <code>initial_angle</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Initial angle  in degrees, defaults to 0.</p> </li> <li> <code>final_angle</code>               (<code>float</code>, default:                   <code>360.0</code> )           \u2013            <p>Final angle in degrees, defaults to 0.</p> </li> <li> <code>n_sides</code>               (<code>int</code>, default:                   <code>400</code> )           \u2013            <p>Number of sides of the ellipse, defaults to 400.</p> </li> <li> <code>layer</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Layer of the ellipse, defaults to 0.</p> </li> <li> <code>data_type</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Data type of the ellipse, defaults to 0.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>@staticmethod\ndef ellipse(\n    centre: PointLike,\n    horizontal_radius: float,\n    vertical_radius: float | None = None,\n    initial_angle: float = 0.0,\n    final_angle: float = 360.0,\n    n_sides: int = 400,\n    layer: int = 0,\n    data_type: int = 0,\n) -&gt; Polygon:\n    \"\"\"Return an ellipse.\n\n    :param PointLike centre: Centre of the ellipse.\n    :param float radius: Radius of the ellipse.\n    :param float initial_angle: Initial angle  in degrees, defaults to 0.\n    :param float final_angle: Final angle in degrees, defaults to 0.\n    :param int n_sides: Number of sides of the ellipse, defaults to 400.\n    :param int layer: Layer of the ellipse, defaults to 0.\n    :param int data_type: Data type of the ellipse, defaults to 0.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the polygon.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the polygon.\"\"\"\n</code></pre>"},{"location":"python-api/elements/polygon/#gdsr._gdsr.Polygon.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Return True if the polygon is equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"Return True if the polygon is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/","title":"Reference","text":""},{"location":"python-api/elements/reference/#t_instance","title":"T_Instance","text":"<p>Type variable for an instance.</p>"},{"location":"python-api/elements/reference/#reference_1","title":"Reference","text":"<p>Reference object. Do not subscript this class, use inferred generic types.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class Reference(Generic[T_Instance]):\n    \"\"\"Reference object. Do not subscript this class, use inferred generic types.\"\"\"\n\n    instance: T_Instance\n    \"\"\"The instance to reference.\"\"\"\n    grid: Grid\n    \"\"\"The grid to reference the cell.\"\"\"\n    def __init__(self, instance: T_Instance, grid: Grid = Grid()) -&gt; None:\n        \"\"\"Initialize the Reference with an instance and a grid.\n\n        :param Instance instance: The instance to reference.\n        :param Grid grid: The grid to reference the cell.\n        \"\"\"\n    @property\n    def bounding_box(self) -&gt; tuple[Point, Point]:\n        \"\"\"Return the bounding box of the reference.\"\"\"\n    def copy(self) -&gt; Self:\n        \"\"\"Return a copy of the reference.\"\"\"\n    def move_to(self, point: PointLike) -&gt; Self:\n        \"\"\"Move the reference to a point.\n\n        This method modifies the reference in place and returns itself.\n\n        :param PointLike point: Point to move the reference to.\n        \"\"\"\n    def move_by(self, vector: PointLike) -&gt; Self:\n        \"\"\"Move the reference by a vector.\n\n        This method modifies the reference in place and returns itself.\n\n        :param PointLike vector: Vector to move the reference by.\n        \"\"\"\n    def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Rotate the reference by an angle around a centre point.\n\n        This method modifies the reference in place and returns itself.\n\n        :param float angle: Counter-clockwise rotation angle in degrees.\n        :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n        \"\"\"\n    def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Scale the reference by a factor around a centre point.\n\n        This method modifies the reference in place and returns itself.\n\n        :param float factor: Scaling factor.\n        :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n        \"\"\"\n    def flatten(\n        self, *layer_data_types: LayerDataType, depth: int | None = None\n    ) -&gt; list[Element]:\n        \"\"\"Return a list of the elements in the reference.\n\n        When depth is None, the reference is flattened to the deepest level.\n\n        :param LayerDataType layer_data_types: the layer, data_type pairs to flatten on\n        :param int depth: Depth of the flattening, defaults to None.\n        \"\"\"\n    def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n        \"\"\"Return True if the instance is on any of the layer, data_type pairs.\"\"\"\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the reference.\"\"\"\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the reference.\"\"\"\n    def __eq__(self, value: object) -&gt; bool:\n        \"\"\"Return True if the reference is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.instance","title":"instance  <code>instance-attribute</code>","text":"<pre><code>instance: T_Instance\n</code></pre> <p>The instance to reference.</p>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.grid","title":"grid  <code>instance-attribute</code>","text":"<pre><code>grid: Grid\n</code></pre> <p>The grid to reference the cell.</p>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.bounding_box","title":"bounding_box  <code>property</code>","text":"<pre><code>bounding_box: tuple[Point, Point]\n</code></pre> <p>Return the bounding box of the reference.</p>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.__init__","title":"__init__","text":"<pre><code>__init__(instance: T_Instance, grid: Grid = Grid()) -&gt; None\n</code></pre> <p>Initialize the Reference with an instance and a grid.</p> <p>Parameters:</p> <ul> <li> <code>instance</code>               (<code>Instance</code>)           \u2013            <p>The instance to reference.</p> </li> <li> <code>grid</code>               (<code>Grid</code>, default:                   <code>Grid()</code> )           \u2013            <p>The grid to reference the cell.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __init__(self, instance: T_Instance, grid: Grid = Grid()) -&gt; None:\n    \"\"\"Initialize the Reference with an instance and a grid.\n\n    :param Instance instance: The instance to reference.\n    :param Grid grid: The grid to reference the cell.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.copy","title":"copy","text":"<pre><code>copy() -&gt; Self\n</code></pre> <p>Return a copy of the reference.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def copy(self) -&gt; Self:\n    \"\"\"Return a copy of the reference.\"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.move_to","title":"move_to","text":"<pre><code>move_to(point: PointLike) -&gt; Self\n</code></pre> <p>Move the reference to a point.</p> <p>This method modifies the reference in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>point</code>               (<code>PointLike</code>)           \u2013            <p>Point to move the reference to.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_to(self, point: PointLike) -&gt; Self:\n    \"\"\"Move the reference to a point.\n\n    This method modifies the reference in place and returns itself.\n\n    :param PointLike point: Point to move the reference to.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.move_by","title":"move_by","text":"<pre><code>move_by(vector: PointLike) -&gt; Self\n</code></pre> <p>Move the reference by a vector.</p> <p>This method modifies the reference in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>vector</code>               (<code>PointLike</code>)           \u2013            <p>Vector to move the reference by.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_by(self, vector: PointLike) -&gt; Self:\n    \"\"\"Move the reference by a vector.\n\n    This method modifies the reference in place and returns itself.\n\n    :param PointLike vector: Vector to move the reference by.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.rotate","title":"rotate","text":"<pre><code>rotate(angle: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Rotate the reference by an angle around a centre point.</p> <p>This method modifies the reference in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Counter-clockwise rotation angle in degrees.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of rotation, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Rotate the reference by an angle around a centre point.\n\n    This method modifies the reference in place and returns itself.\n\n    :param float angle: Counter-clockwise rotation angle in degrees.\n    :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.scale","title":"scale","text":"<pre><code>scale(factor: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Scale the reference by a factor around a centre point.</p> <p>This method modifies the reference in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>factor</code>               (<code>float</code>)           \u2013            <p>Scaling factor.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of scaling, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Scale the reference by a factor around a centre point.\n\n    This method modifies the reference in place and returns itself.\n\n    :param float factor: Scaling factor.\n    :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.flatten","title":"flatten","text":"<pre><code>flatten(*layer_data_types: LayerDataType, depth: int | None = None) -&gt; list[Element]\n</code></pre> <p>Return a list of the elements in the reference.</p> <p>When depth is None, the reference is flattened to the deepest level.</p> <p>Parameters:</p> <ul> <li> <code>layer_data_types</code>               (<code>LayerDataType</code>, default:                   <code>()</code> )           \u2013            <p>the layer, data_type pairs to flatten on</p> </li> <li> <code>depth</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Depth of the flattening, defaults to None.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def flatten(\n    self, *layer_data_types: LayerDataType, depth: int | None = None\n) -&gt; list[Element]:\n    \"\"\"Return a list of the elements in the reference.\n\n    When depth is None, the reference is flattened to the deepest level.\n\n    :param LayerDataType layer_data_types: the layer, data_type pairs to flatten on\n    :param int depth: Depth of the flattening, defaults to None.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.is_on","title":"is_on","text":"<pre><code>is_on(*layer_data_types: LayerDataType) -&gt; bool\n</code></pre> <p>Return True if the instance is on any of the layer, data_type pairs.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n    \"\"\"Return True if the instance is on any of the layer, data_type pairs.\"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the reference.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the reference.\"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the reference.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the reference.\"\"\"\n</code></pre>"},{"location":"python-api/elements/reference/#gdsr._gdsr.Reference.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Return True if the reference is equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"Return True if the reference is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/","title":"Text","text":""},{"location":"python-api/elements/text/#text_1","title":"Text","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class Text:\n    text: str\n    \"\"\"Text content.\"\"\"\n    @property\n    def origin(self) -&gt; Point:\n        \"\"\"Text origin.\"\"\"\n    @origin.setter\n    def origin(self, origin: PointLike) -&gt; None:\n        \"\"\"Set the text origin.\"\"\"\n    layer: Layer\n    \"\"\"Text layer.\"\"\"\n    magnification: float\n    \"\"\"Text magnification.\"\"\"\n    angle: float\n    \"\"\"Text angle in degrees.\"\"\"\n    x_reflection: bool\n    \"\"\"Text x reflection.\"\"\"\n    vertical_presentation: VerticalPresentation\n    \"\"\"Text vertical presentation.\"\"\"\n    horizontal_presentation: HorizontalPresentation\n    \"\"\"Text horizontal presentation.\"\"\"\n    def __init__(\n        self,\n        text: str,\n        origin: PointLike = Point(0, 0),\n        layer: Layer = 0,\n        magnification: float = 1.0,\n        angle: float = 0.0,\n        x_reflection: bool = False,\n        vertical_presentation: VerticalPresentation = VerticalPresentation.Middle,\n        horizontal_presentation: HorizontalPresentation = HorizontalPresentation.Centre,\n    ) -&gt; None:\n        \"\"\"Initialize the Text with text and origin.\n\n        :param str text: Text content.\n        :param PointLike origin: Text origin, defaults to Point(0, 0).\n        :param Layer layer: Text layer, defaults to 0.\n        :param float magnification: Text magnification, defaults to 1.0.\n        :param float angle: Text angle in degrees, defaults to 0.0.\n        :param bool x_reflection: Text x reflection, defaults to False.\n        :param VerticalPresentation vertical_presentation: Text vertical presentation,\n        defaults to VerticalPresentation.Middle.\n        :param HorizontalPresentation horizontal_presentation: Text horizontal\n        presentation, defaults to HorizontalPresentation.Centre.\n        \"\"\"\n    @property\n    def bounding_box(self) -&gt; tuple[Point, Point]:\n        \"\"\"Return the bounding box of the text.\"\"\"\n    def set_text(self, text: str) -&gt; Self:\n        \"\"\"Set the text content.\"\"\"\n    def set_origin(self, origin: PointLike) -&gt; Self:\n        \"\"\"Set the origin of the text.\"\"\"\n    def set_layer(self, layer: Layer) -&gt; Self:\n        \"\"\"Set the layer of the text.\"\"\"\n    def set_magnification(self, magnification: float) -&gt; Self:\n        \"\"\"Set the magnification of the text.\"\"\"\n    def set_angle(self, angle: float) -&gt; Self:\n        \"\"\"Set the angle of the text.\"\"\"\n    def set_x_reflection(self, x_reflection: bool) -&gt; Self:\n        \"\"\"Set the x reflection of the text.\"\"\"\n    def set_vertical_presentation(\n        self, vertical_presentation: VerticalPresentation\n    ) -&gt; Self:\n        \"\"\"Set the vertical presentation of the text.\"\"\"\n    def set_horizontal_presentation(\n        self, horizontal_presentation: HorizontalPresentation\n    ) -&gt; Self:\n        \"\"\"Set the horizontal presentation of the text.\"\"\"\n    def copy(self) -&gt; Self:\n        \"\"\"Return a copy of the text.\"\"\"\n    def move_to(self, point: PointLike) -&gt; Self:\n        \"\"\"Move the text to a point.\n\n        This method modifies the text in place and returns itself.\n\n        :param PointLike point: Point to move the text to.\n        \"\"\"\n    def move_by(self, vector: PointLike) -&gt; Self:\n        \"\"\"Move the text by a vector.\n\n        This method modifies the text in place and returns itself.\n\n        :param PointLike vector: Vector to move the text by.\n        \"\"\"\n    def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Rotate the text by an angle around a centre point.\n\n        This method modifies the text in place and returns itself.\n\n        :param float angle: Counter-clockwise rotation angle in degrees.\n        :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n        \"\"\"\n    def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n        \"\"\"Scale the text by a factor around a centre point.\n\n        This method modifies the text in place and returns itself.\n\n        :param float factor: Scaling factor.\n        :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n        \"\"\"\n    def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n        \"\"\"Return True if the text is on any of the layer, data_type pairs.\"\"\"\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the text.\"\"\"\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the text.\"\"\"\n    def __eq__(self, value: object) -&gt; bool:\n        \"\"\"Return True if the text is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.text","title":"text  <code>instance-attribute</code>","text":"<pre><code>text: str\n</code></pre> <p>Text content.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.origin","title":"origin  <code>property</code> <code>writable</code>","text":"<pre><code>origin: Point\n</code></pre> <p>Text origin.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.layer","title":"layer  <code>instance-attribute</code>","text":"<pre><code>layer: Layer\n</code></pre> <p>Text layer.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.magnification","title":"magnification  <code>instance-attribute</code>","text":"<pre><code>magnification: float\n</code></pre> <p>Text magnification.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.angle","title":"angle  <code>instance-attribute</code>","text":"<pre><code>angle: float\n</code></pre> <p>Text angle in degrees.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.x_reflection","title":"x_reflection  <code>instance-attribute</code>","text":"<pre><code>x_reflection: bool\n</code></pre> <p>Text x reflection.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.vertical_presentation","title":"vertical_presentation  <code>instance-attribute</code>","text":"<pre><code>vertical_presentation: VerticalPresentation\n</code></pre> <p>Text vertical presentation.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.horizontal_presentation","title":"horizontal_presentation  <code>instance-attribute</code>","text":"<pre><code>horizontal_presentation: HorizontalPresentation\n</code></pre> <p>Text horizontal presentation.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.bounding_box","title":"bounding_box  <code>property</code>","text":"<pre><code>bounding_box: tuple[Point, Point]\n</code></pre> <p>Return the bounding box of the text.</p>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.__init__","title":"__init__","text":"<pre><code>__init__(text: str, origin: PointLike = Point(0, 0), layer: Layer = 0, magnification: float = 1.0, angle: float = 0.0, x_reflection: bool = False, vertical_presentation: VerticalPresentation = VerticalPresentation.Middle, horizontal_presentation: HorizontalPresentation = HorizontalPresentation.Centre) -&gt; None\n</code></pre> <p>Initialize the Text with text and origin.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>Text content.</p> </li> <li> <code>origin</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Text origin, defaults to Point(0, 0).</p> </li> <li> <code>layer</code>               (<code>Layer</code>, default:                   <code>0</code> )           \u2013            <p>Text layer, defaults to 0.</p> </li> <li> <code>magnification</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>Text magnification, defaults to 1.0.</p> </li> <li> <code>angle</code>               (<code>float</code>, default:                   <code>0.0</code> )           \u2013            <p>Text angle in degrees, defaults to 0.0.</p> </li> <li> <code>x_reflection</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Text x reflection, defaults to False.</p> </li> <li> <code>vertical_presentation</code>               (<code>VerticalPresentation</code>, default:                   <code>VerticalPresentation.Middle</code> )           \u2013            <p>Text vertical presentation, defaults to VerticalPresentation.Middle.</p> </li> <li> <code>horizontal_presentation</code>               (<code>HorizontalPresentation</code>, default:                   <code>HorizontalPresentation.Centre</code> )           \u2013            <p>Text horizontal presentation, defaults to HorizontalPresentation.Centre.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __init__(\n    self,\n    text: str,\n    origin: PointLike = Point(0, 0),\n    layer: Layer = 0,\n    magnification: float = 1.0,\n    angle: float = 0.0,\n    x_reflection: bool = False,\n    vertical_presentation: VerticalPresentation = VerticalPresentation.Middle,\n    horizontal_presentation: HorizontalPresentation = HorizontalPresentation.Centre,\n) -&gt; None:\n    \"\"\"Initialize the Text with text and origin.\n\n    :param str text: Text content.\n    :param PointLike origin: Text origin, defaults to Point(0, 0).\n    :param Layer layer: Text layer, defaults to 0.\n    :param float magnification: Text magnification, defaults to 1.0.\n    :param float angle: Text angle in degrees, defaults to 0.0.\n    :param bool x_reflection: Text x reflection, defaults to False.\n    :param VerticalPresentation vertical_presentation: Text vertical presentation,\n    defaults to VerticalPresentation.Middle.\n    :param HorizontalPresentation horizontal_presentation: Text horizontal\n    presentation, defaults to HorizontalPresentation.Centre.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_text","title":"set_text","text":"<pre><code>set_text(text: str) -&gt; Self\n</code></pre> <p>Set the text content.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_text(self, text: str) -&gt; Self:\n    \"\"\"Set the text content.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_origin","title":"set_origin","text":"<pre><code>set_origin(origin: PointLike) -&gt; Self\n</code></pre> <p>Set the origin of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_origin(self, origin: PointLike) -&gt; Self:\n    \"\"\"Set the origin of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_layer","title":"set_layer","text":"<pre><code>set_layer(layer: Layer) -&gt; Self\n</code></pre> <p>Set the layer of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_layer(self, layer: Layer) -&gt; Self:\n    \"\"\"Set the layer of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_magnification","title":"set_magnification","text":"<pre><code>set_magnification(magnification: float) -&gt; Self\n</code></pre> <p>Set the magnification of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_magnification(self, magnification: float) -&gt; Self:\n    \"\"\"Set the magnification of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_angle","title":"set_angle","text":"<pre><code>set_angle(angle: float) -&gt; Self\n</code></pre> <p>Set the angle of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_angle(self, angle: float) -&gt; Self:\n    \"\"\"Set the angle of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_x_reflection","title":"set_x_reflection","text":"<pre><code>set_x_reflection(x_reflection: bool) -&gt; Self\n</code></pre> <p>Set the x reflection of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_x_reflection(self, x_reflection: bool) -&gt; Self:\n    \"\"\"Set the x reflection of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_vertical_presentation","title":"set_vertical_presentation","text":"<pre><code>set_vertical_presentation(vertical_presentation: VerticalPresentation) -&gt; Self\n</code></pre> <p>Set the vertical presentation of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_vertical_presentation(\n    self, vertical_presentation: VerticalPresentation\n) -&gt; Self:\n    \"\"\"Set the vertical presentation of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.set_horizontal_presentation","title":"set_horizontal_presentation","text":"<pre><code>set_horizontal_presentation(horizontal_presentation: HorizontalPresentation) -&gt; Self\n</code></pre> <p>Set the horizontal presentation of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def set_horizontal_presentation(\n    self, horizontal_presentation: HorizontalPresentation\n) -&gt; Self:\n    \"\"\"Set the horizontal presentation of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.copy","title":"copy","text":"<pre><code>copy() -&gt; Self\n</code></pre> <p>Return a copy of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def copy(self) -&gt; Self:\n    \"\"\"Return a copy of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.move_to","title":"move_to","text":"<pre><code>move_to(point: PointLike) -&gt; Self\n</code></pre> <p>Move the text to a point.</p> <p>This method modifies the text in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>point</code>               (<code>PointLike</code>)           \u2013            <p>Point to move the text to.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_to(self, point: PointLike) -&gt; Self:\n    \"\"\"Move the text to a point.\n\n    This method modifies the text in place and returns itself.\n\n    :param PointLike point: Point to move the text to.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.move_by","title":"move_by","text":"<pre><code>move_by(vector: PointLike) -&gt; Self\n</code></pre> <p>Move the text by a vector.</p> <p>This method modifies the text in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>vector</code>               (<code>PointLike</code>)           \u2013            <p>Vector to move the text by.</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def move_by(self, vector: PointLike) -&gt; Self:\n    \"\"\"Move the text by a vector.\n\n    This method modifies the text in place and returns itself.\n\n    :param PointLike vector: Vector to move the text by.\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.rotate","title":"rotate","text":"<pre><code>rotate(angle: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Rotate the text by an angle around a centre point.</p> <p>This method modifies the text in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>float</code>)           \u2013            <p>Counter-clockwise rotation angle in degrees.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of rotation, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def rotate(self, angle: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Rotate the text by an angle around a centre point.\n\n    This method modifies the text in place and returns itself.\n\n    :param float angle: Counter-clockwise rotation angle in degrees.\n    :param PointLike centre: Centre point of rotation, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.scale","title":"scale","text":"<pre><code>scale(factor: float, centre: PointLike = Point(0, 0)) -&gt; Self\n</code></pre> <p>Scale the text by a factor around a centre point.</p> <p>This method modifies the text in place and returns itself.</p> <p>Parameters:</p> <ul> <li> <code>factor</code>               (<code>float</code>)           \u2013            <p>Scaling factor.</p> </li> <li> <code>centre</code>               (<code>PointLike</code>, default:                   <code>Point(0, 0)</code> )           \u2013            <p>Centre point of scaling, defaults to (0, 0).</p> </li> </ul> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def scale(self, factor: float, centre: PointLike = Point(0, 0)) -&gt; Self:\n    \"\"\"Scale the text by a factor around a centre point.\n\n    This method modifies the text in place and returns itself.\n\n    :param float factor: Scaling factor.\n    :param PointLike centre: Centre point of scaling, defaults to (0, 0).\n    \"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.is_on","title":"is_on","text":"<pre><code>is_on(*layer_data_types: LayerDataType) -&gt; bool\n</code></pre> <p>Return True if the text is on any of the layer, data_type pairs.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def is_on(self, *layer_data_types: LayerDataType) -&gt; bool:\n    \"\"\"Return True if the text is on any of the layer, data_type pairs.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre> <p>Return a string representation of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.__repr__","title":"__repr__","text":"<pre><code>__repr__() -&gt; str\n</code></pre> <p>Return a string representation of the text.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the text.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.Text.__eq__","title":"__eq__","text":"<pre><code>__eq__(value: object) -&gt; bool\n</code></pre> <p>Return True if the text is equal to another object.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>def __eq__(self, value: object) -&gt; bool:\n    \"\"\"Return True if the text is equal to another object.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#verticalpresentation","title":"VerticalPresentation","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class VerticalPresentation(Enum):\n    Top = 0\n    Middle = 1\n    Bottom = 2\n\n    @staticmethod\n    def values() -&gt; list[VerticalPresentation]:\n        \"\"\"Return a list of all VerticalPresentation values.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.VerticalPresentation.Top","title":"Top  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Top = 0\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.VerticalPresentation.Middle","title":"Middle  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Middle = 1\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.VerticalPresentation.Bottom","title":"Bottom  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Bottom = 2\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.VerticalPresentation.values","title":"values  <code>staticmethod</code>","text":"<pre><code>values() -&gt; list[VerticalPresentation]\n</code></pre> <p>Return a list of all VerticalPresentation values.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>@staticmethod\ndef values() -&gt; list[VerticalPresentation]:\n    \"\"\"Return a list of all VerticalPresentation values.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#horizontalpresentation","title":"HorizontalPresentation","text":"Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>class HorizontalPresentation(Enum):\n    Left = 0\n    Centre = 1\n    Right = 2\n\n    @staticmethod\n    def values() -&gt; list[HorizontalPresentation]:\n        \"\"\"Return a list of all HorizontalPresentation values.\"\"\"\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.HorizontalPresentation.Left","title":"Left  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Left = 0\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.HorizontalPresentation.Centre","title":"Centre  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Centre = 1\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.HorizontalPresentation.Right","title":"Right  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Right = 2\n</code></pre>"},{"location":"python-api/elements/text/#gdsr._gdsr.HorizontalPresentation.values","title":"values  <code>staticmethod</code>","text":"<pre><code>values() -&gt; list[HorizontalPresentation]\n</code></pre> <p>Return a list of all HorizontalPresentation values.</p> Source code in <code>gdsr/_gdsr.pyi</code> <pre><code>@staticmethod\ndef values() -&gt; list[HorizontalPresentation]:\n    \"\"\"Return a list of all HorizontalPresentation values.\"\"\"\n</code></pre>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":""},{"location":"user-guide/installation/","title":"Installation","text":""}]}